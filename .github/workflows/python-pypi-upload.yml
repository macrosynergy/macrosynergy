name: Test & Upload to PyPI

on:
  release:
    types: [published]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  pypi-upload:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest # can also use windows-latest
    strategy:
      matrix:
        python-version: [3.11] # For multiple: [3.7, 3.8]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          pip install .[test]

      - name: Lint with flake8
        run: |
          # Options: exluding docs, scripts and build folders. Also, treating certain errors as warnings.
          flake8 --count --select=E9,F63,F7,F82 --show-source --exclude=./docs/**,./.github/scripts/*,./build/** --statistics
          flake8 --count --exit-zero --max-complexity=10 --max-line-length=127 --exclude=./docs/**,./.github/scripts/*,./build/** --statistics

      - name: Test with pytest
        run: |
          pytest -rEf tests/unit/
      - name: Upload coverage reports to Codecov
        run: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -t ${CODECOV_TOKEN}
          
        #NOTE: Codecov must be run before the integration tests
      - name: Run integration tests with pytest
        env:
          DQ_CLIENT_ID: ${{ secrets.DQ_CLIENT_ID }}
          DQ_CLIENT_SECRET: ${{ secrets.DQ_CLIENT_SECRET }}
        run: |
          echo 'Run Integration tests'
          pytest tests/integration/
          echo 'Integration test complete'

      - name: Install pypa/build
        run: python -m pip install build --user

      - name: Build a binary wheel and a source tarball
        run: python -m build --sdist --wheel --outdir dist/ .

      - name: Check and Upload to PyPI
        run: |
          pip install twine
          twine check dist/*
          twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#release

## Publish docs
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r docs.old/requirements.txt
          pip install flake8

      - name: Run jupyterbook build of documentation
        run: |
          bash docs.old/scripts/build.sh

      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          # Upload entire repository
          path: "./docs.old/_build/html"
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
