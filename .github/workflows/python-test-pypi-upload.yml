# This is a basic workflow to help you get started with Actions

name: Test & Upload to TestPyPI

# Controls when the action will run.
on:
  # Triggers the workflow on push to the test branch. Merge events also trigger the workflow, as they trigger a push event.
  push:
    branches: [test]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest # can also use windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it

      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          pip install .[test]

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        run: |
          # Options: --ignore=tests/specific.py --ignore-glob=tests/ignore-pattern
          pytest tests/unit/

      - name: Run integration tests with pytest
        env:
          DQ_CLIENT_ID: ${{ secrets.DQ_CLIENT_ID }}
          DQ_CLIENT_SECRET: ${{ secrets.DQ_CLIENT_SECRET }}
        run: |
          echo 'Run Integration tests'
          pytest tests/integration/
          echo 'Integration test complete'

      - name: Install pypa/build
        run: python -m pip install build --user

      - name: Build a binary wheel and a source tarball
        run: python -m build --sdist --wheel --outdir dist/ .

      - name: Check and Upload to TestPyPI
        run: |
          pip install twine
          twine check dist/*
          # twine upload -r testpypi dist/*
          # push blocked for now
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
          TWINE_REPOSITORY: testpypi
# thank you arnu515, https://dev.to/arnu515/create-a-pypi-pip-package-test-it-and-publish-it-using-github-actions-part-2-1o83

# also look at https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions

# https://github.com/actions/setup-python , specifies using actions/setup-python@v4

# https://twine.readthedocs.io/en/stable/#using-twine
